The grammar: 
START SYMBOL: Module	Not used
TERMINALS:
ARRAY	IMPORT	RETURN	BEGIN	IN	THEN	BY	IS	TO	CASE	LOOP	TYPE	CONST	MOD	UNTIL	DIV	MODULE	VAR	DO	NIL	WHILE	ELSE	OF	WITH	ELSIF	OR	END	POINTER	EXIT	PROCEDURE	FOR	RECORD	IF	REPEAT	LTEQ	GTEQ	DOTDOT	ASSIGN	number	character	string	ident	';'	'.'	','	'='	':'	'^'	'('	')'	'|'	'+'	'-'	'~'	'{'	'}'	'#'	'<'	'>'	'*'	'/'	'&'	'['	']'	
NON-TERMINALS:
0: Module	-> MODULE ident ';' [ImportList] DeclSeq [BEGIN StatementSeq] END ident '.'
1: ImportList	-> IMPORT [ident ASSIGN] ident {',' [ident ASSIGN] ident} ';'
2: DeclSeq	-> {CONST {ConstDecl ';'} | TYPE {TypeDecl ';'} | VAR {VarDecl ';'}} {ProcDecl ';' | ForwardDecl ';'}
3: StatementSeq	-> Statement {';' Statement}
4: ConstDecl	-> IdentDef '=' ConstExpr
5: TypeDecl	-> IdentDef '=' Type
6: VarDecl	-> IdentList ':' Type
7: ProcDecl	-> PROCEDURE [Receiver] IdentDef [FormalPars] ';' DeclSeq [BEGIN StatementSeq] END ident
8: ForwardDecl	-> PROCEDURE '^' [Receiver] IdentDef [FormalPars]
9: IdentDef	-> ident ['*' | '-']
10: ConstExpr	-> Expr
11: Type	-> Qualident | ARRAY [ConstExpr {',' ConstExpr}] OF Type | RECORD ['(' Qualident ')'] FieldList {';' FieldList} END | POINTER TO Type | PROCEDURE [FormalPars]
12: IdentList	-> IdentDef {',' IdentDef}
13: Receiver	-> '(' [VAR] ident ':' ident ')'
14: FormalPars	-> '(' [FPSection {';' FPSection}] ')' [':' Qualident]
15: FPSection	-> [VAR] ident {',' ident} ':' Type
16: Qualident	-> [ident '.'] ident
17: FieldList	-> [IdentList ':' Type]
18: Statement	-> [Designator ASSIGN Expr | Designator ['(' [ExprList] ')'] | IF Expr THEN StatementSeq {ELSIF Expr THEN StatementSeq} [ELSE StatementSeq] END | CASE Expr OF Case {'|' Case} [ELSE StatementSeq] END | WHILE Expr DO StatementSeq END | REPEAT StatementSeq UNTIL Expr | FOR ident ASSIGN Expr TO Expr [BY ConstExpr] DO StatementSeq END | LOOP StatementSeq END | WITH Guard DO StatementSeq {'|' Guard DO StatementSeq} [ELSE StatementSeq] END | EXIT | RETURN [Expr]]
19: Designator	-> Qualident {'.' ident | '[' ExprList ']' | '^' | '(' Qualident ')'}
20: Expr	-> SimpleExpr [Relation SimpleExpr]
21: ExprList	-> Expr {',' Expr}
22: Case	-> [CaseLabels {',' CaseLabels} ':' StatementSeq]
23: Guard	-> Qualident ':' Qualident
24: CaseLabels	-> ConstExpr [DOTDOT ConstExpr]
25: SimpleExpr	-> ['+' | '-'] Term {AddOp Term}
26: Relation	-> '=' | '#' | '<' | LTEQ | '>' | GTEQ | IN | IS
27: Term	-> Factor {MulOp Factor}
28: AddOp	-> '+' | '-' | OR
29: Factor	-> Designator ['(' [ExprList] ')'] | number | character | string | NIL | Set | '(' Expr ')' | '~' Factor
30: MulOp	-> '*' | '/' | DIV | MOD | '&'
31: Set	-> '{' [Element {',' Element}] '}'
32: Element	-> Expr [DOTDOT Expr]
>>> There are 64 terminals and 33 non-terminals 
>>> Total McCabe complexity is: 98
McCabe Metrics:
   2   3   8   1   0   0   0   3   2   2   0   9   1   1   3   2   1   1  21   4
   1   1   2   0   1   3   7   1   2   9   4   2   1
>>> Total Halstead volume is: 32077
>>> Average RHS Size is: 7.51515
GRAMMATICAL LEVELS:
DERIVES-IN-ONE RELATION
  0:  ***                             
  1:                                  
  2:     *****                        
  3:                   *              
  4:          **                      
  5:          * *                     
  6:            **                    
  7:   **     *   **                  
  8:          *   **                  
  9:                                  
 10:                     *            
 11:           **  * **               
 12:          *                       
 13:                                  
 14:                **                
 15:            *                     
 16:                                  
 17:            **                    
 18:    *      *        *****         
 19:                 *    *           
 20:                          **      
 21:                     *            
 22:    *                    *        
 23:                 *                
 24:           *                      
 25:                            **    
 26:                                  
 27:                              **  
 28:                                  
 29:                    ***       * * 
 30:                                  
 31:                                 *
 32:                     *            
DERIVES-IN-MANY RELATION
  0:  ********************************
  1:                                  
  2:   *******************************
  3:    *      *     * ***************
  4:          **     *  ***   ********
  5:          **** **** ***   ********
  6:          **** **** ***   ********
  7:   *******************************
  8:          ********* ***   ********
  9:                                  
 10:                 *  ***   ********
 11:          **** **** ***   ********
 12:          *                       
 13:                                  
 14:          **** **** ***   ********
 15:          **** **** ***   ********
 16:                                  
 17:          **** **** ***   ********
 18:    *      *     * ***************
 19:                 *  ***   ********
 20:                 *  ***   ********
 21:                 *  ***   ********
 22:    *      *     * ***************
 23:                 *                
 24:           *     *  ***   ********
 25:                 *  ***   ********
 26:                                  
 27:                 *  ***   ********
 28:                                  
 29:                 *  ***   ********
 30:                                  
 31:                 *  ***   ********
 32:                 *  ***   ********
Fenton impurity is: 2.73438
>>> Fenton closed impurity is: 36.1328
Class #2: (size = 2) 
	DeclSeq	ProcDecl
Class #3: (size = 3) 
	StatementSeq	Statement	Case
Class #10: (size = 4) 
	Type	FormalPars	FPSection	FieldList
Class #14: (size = 8) 
	Designator	Expr	ExprList	SimpleExpr	Term	Factor	Set
	Element
>>> There are 20 equivalence classes, 4 of which are non-singleton
As a percentage of the number of non-terminals, there are 60.6% equivalence classes 
>>> (Depth) Largest equivalence class has 8 non-terminals
Varju height metric is: 35
EQUIVALENCE GRAPH (size 20)
0:  *******************
1:                     
2:    *****************
3:          *   *******
4:         **   **  ***
5:         **** **  ***
6:         **** **  ***
7:         *******  ***
8:                     
9:              **  ***
10:         ** * **  ***
11:         *           
12:                     
13:                     
14:              *   ***
15:              *      
16:          *   **  ***
17:                     
18:                     
19:                     
