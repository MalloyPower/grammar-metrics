The grammar: 
START SYMBOL: translation_unit
TERMINALS:
IDENTIFIER	STRING_LITERAL	SIZEOF	PTR_OP	INC_OP	DEC_OP	LEFT_OP	RIGHT_OP	LE_OP	GE_OP	EQ_OP	NE_OP	AND_OP	OR_OP	MUL_ASSIGN	DIV_ASSIGN	MOD_ASSIGN	ADD_ASSIGN	SUB_ASSIGN	LEFT_ASSIGN	RIGHT_ASSIGN	AND_ASSIGN	XOR_ASSIGN	OR_ASSIGN	TYPEDEF_NAME	INTEGER_CONSTANT	CHARACTER_CONSTANT	FLOATING_CONSTANT	ENUMERATION_CONSTANT	TYPEDEF	EXTERN	STATIC	AUTO	REGISTER	CHAR	SHORT	INT	LONG	SIGNED	UNSIGNED	FLOAT	DOUBLE	CONST	VOLATILE	VOID	STRUCT	UNION	ENUM	ELIPSIS	RANGE	Not used	CASE	DEFAULT	IF	ELSE	SWITCH	WHILE	DO	FOR	GOTO	CONTINUE	BREAK	RETURN	';'	'{'	'}'	','	'='	':'	'('	')'	'['	']'	'*'	'?'	'|'	'^'	'&'	'<'	'>'	'+'	'-'	'/'	'%'	'~'	'!'	'.'	
NON-TERMINALS:
0: translation_unit	-> external_declaration | translation_unit external_declaration
1: external_declaration	-> function_definition | declaration
2: function_definition	-> [declaration_specifiers] declarator [declaration_list] compound_statement
3: declaration	-> declaration_specifiers [init_declarator_list] ';'
4: declaration_specifiers	-> storage_class_specifier [declaration_specifiers] | type_specifier [declaration_specifiers] | type_qualifier [declaration_specifiers]
5: declarator	-> [pointer] direct_declarator
6: declaration_list	-> declaration | declaration_list declaration
7: compound_statement	-> '{' [declaration_list] [statement_list] '}'
8: init_declarator_list	-> init_declarator | init_declarator_list ',' init_declarator
9: storage_class_specifier	-> AUTO | REGISTER | STATIC | EXTERN | TYPEDEF
10: type_specifier	-> VOID | CHAR | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED | struct_or_union_specifier | enum_specifier | TYPEDEF_NAME
11: type_qualifier	-> CONST | VOLATILE
12: struct_or_union_specifier	-> struct_or_union [IDENTIFIER] '{' struct_declaration_list '}' | struct_or_union IDENTIFIER
13: enum_specifier	-> ENUM [IDENTIFIER] '{' enumerator_list '}' | ENUM IDENTIFIER
14: struct_or_union	-> STRUCT | UNION
15: struct_declaration_list	-> struct_declaration | struct_declaration_list struct_declaration
16: struct_declaration	-> specifier_qualifier_list struct_declarator_list ';'
17: init_declarator	-> declarator | declarator '=' initializer
18: initializer	-> assignment_expression | '{' initializer_list '}' | '{' initializer_list ',' '}'
19: specifier_qualifier_list	-> type_specifier [specifier_qualifier_list] | type_qualifier [specifier_qualifier_list]
20: struct_declarator_list	-> struct_declarator | struct_declarator_list ',' struct_declarator
21: struct_declarator	-> declarator | [declarator] ':' constant_expression
22: constant_expression	-> conditional_expression
23: enumerator_list	-> enumerator | enumerator_list ',' enumerator
24: enumerator	-> IDENTIFIER | IDENTIFIER '=' constant_expression
25: pointer	-> '*' [type_qualifier_list] | '*' [type_qualifier_list] pointer
26: direct_declarator	-> IDENTIFIER | '(' declarator ')' | direct_declarator '[' [constant_expression] ']' | direct_declarator '(' parameter_type_list ')' | direct_declarator '(' [identifier_list] ')'
27: parameter_type_list	-> parameter_list | parameter_list ',' ELIPSIS
28: identifier_list	-> IDENTIFIER | identifier_list ',' IDENTIFIER
29: type_qualifier_list	-> type_qualifier | type_qualifier_list type_qualifier
30: parameter_list	-> parameter_declaration | parameter_list ',' parameter_declaration
31: parameter_declaration	-> declaration_specifiers declarator | declaration_specifiers [abstract_declarator]
32: abstract_declarator	-> pointer | [pointer] direct_abstract_declarator
33: assignment_expression	-> conditional_expression | unary_expression assignment_operator assignment_expression
34: initializer_list	-> initializer | initializer_list ',' initializer
35: type_name	-> specifier_qualifier_list [abstract_declarator]
36: direct_abstract_declarator	-> '(' abstract_declarator ')' | [direct_abstract_declarator] '[' [constant_expression] ']' | [direct_abstract_declarator] '(' [parameter_type_list] ')'
37: typedef_name	-> IDENTIFIER
38: statement	-> labeled_statement | expression_statement | compound_statement | selection_statement | iteration_statement | jump_statement
39: labeled_statement	-> IDENTIFIER ':' statement | CASE constant_expression ':' statement | DEFAULT ':' statement
40: expression_statement	-> [expression] ';'
41: selection_statement	-> IF '(' expression ')' statement | IF '(' expression ')' statement ELSE statement | SWITCH '(' expression ')' statement
42: iteration_statement	-> WHILE '(' expression ')' statement | DO statement WHILE '(' expression ')' ';' | FOR '(' [expression] ';' [expression] ';' [expression] ')' statement
43: jump_statement	-> GOTO IDENTIFIER ';' | CONTINUE ';' | BREAK ';' | RETURN [expression] ';'
44: expression	-> assignment_expression | expression ',' assignment_expression
45: statement_list	-> statement | statement_list statement
46: conditional_expression	-> logical_or_expression | logical_or_expression '?' expression ':' conditional_expression
47: unary_expression	-> postfix_expression | INC_OP unary_expression | DEC_OP unary_expression | unary_operator cast_expression | SIZEOF unary_expression | SIZEOF '(' type_name ')'
48: assignment_operator	-> '=' | MUL_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_ASSIGN | RIGHT_ASSIGN | AND_ASSIGN | XOR_ASSIGN | OR_ASSIGN
49: logical_or_expression	-> logical_and_expression | logical_or_expression OR_OP logical_and_expression
50: logical_and_expression	-> inclusive_or_expression | logical_and_expression AND_OP inclusive_or_expression
51: inclusive_or_expression	-> exclusive_or_expression | inclusive_or_expression '|' exclusive_or_expression
52: exclusive_or_expression	-> and_expression | exclusive_or_expression '^' and_expression
53: and_expression	-> equality_expression | and_expression '&' equality_expression
54: equality_expression	-> relational_expression | equality_expression EQ_OP relational_expression | equality_expression NE_OP relational_expression
55: relational_expression	-> shift_expression | relational_expression '<' shift_expression | relational_expression '>' shift_expression | relational_expression LE_OP shift_expression | relational_expression GE_OP shift_expression
56: shift_expression	-> additive_expression | shift_expression LEFT_OP additive_expression | shift_expression RIGHT_OP additive_expression
57: additive_expression	-> multiplicative_expression | additive_expression '+' multiplicative_expression | additive_expression '-' multiplicative_expression
58: multiplicative_expression	-> cast_expression | multiplicative_expression '*' cast_expression | multiplicative_expression '/' cast_expression | multiplicative_expression '%' cast_expression
59: cast_expression	-> unary_expression | '(' type_name ')' cast_expression
60: postfix_expression	-> primary_expression | postfix_expression '[' expression ']' | postfix_expression '(' [argument_expression_list] ')' | postfix_expression '.' IDENTIFIER | postfix_expression PTR_OP IDENTIFIER | postfix_expression INC_OP | postfix_expression DEC_OP
61: unary_operator	-> '&' | '*' | '+' | '-' | '~' | '!'
62: primary_expression	-> IDENTIFIER | constant | STRING_LITERAL | '(' expression ')'
63: argument_expression_list	-> assignment_expression | argument_expression_list ',' assignment_expression
64: constant	-> INTEGER_CONSTANT | CHARACTER_CONSTANT | FLOATING_CONSTANT | ENUMERATION_CONSTANT
>>> There are 86 terminals and 65 non-terminals 
>>> Total McCabe complexity is: 149
McCabe Metrics:
   1   1   2   1   5   1   1   2   1   4  11   1   2   2   1   1   0   1   2   3
   1   2   0   1   1   3   6   1   1   1   1   2   2   1   1   1   6   0   5   2
   1   2   5   4   1   1   1   5  10   1   1   1   1   1   2   4   2   2   3   1
   7   5   3   1   3
>>> Total Halstead volume is: 51257.2
>>> Average RHS Size is: 5.86154
GRAMMATICAL LEVELS:
DERIVES-IN-ONE RELATION
  0: **                                                               
  1:   **                                                             
  2:     ****                                                         
  3:     *   *                                                        
  4:     *    ***                                                     
  5:                          **                                      
  6:    *  *                                                          
  7:       *                                      *                   
  8:         *        *                                               
  9:                                                                  
 10:             **                                                   
 11:                                                                  
 12:               **                                                 
 13:                        *                                         
 14:                                                                  
 15:                **                                                
 16:                    **                                            
 17:      *            *                                              
 18:                                  **                              
 19:           **       *                                             
 20:                     **                                           
 21:      *                *                                          
 22:                                               *                  
 23:                        **                                        
 24:                       *                                          
 25:                          *   *                                   
 26:      *                *   ***                                    
 27:                               *                                  
 28:                             *                                    
 29:            *                 *                                   
 30:                               **                                 
 31:     **                          *                                
 32:                          *          *                            
 33:                                  *            ***                
 34:                   *               *                              
 35:                    *            *                                
 36:                       *    *    *   *                            
 37:                                                                  
 38:        *                               *****                     
 39:                       *               *                          
 40:                                             *                    
 41:                                       *     *                    
 42:                                       *     *                    
 43:                                             *                    
 44:                                  *          *                    
 45:                                       *      *                   
 46:                                             * *  *               
 47:                                    *           *           ***   
 48:                                                                  
 49:                                                  **              
 50:                                                   **             
 51:                                                    **            
 52:                                                     **           
 53:                                                      **          
 54:                                                       **         
 55:                                                        **        
 56:                                                         **       
 57:                                                          **      
 58:                                                           **     
 59:                                    *           *           *     
 60:                                             *               * ** 
 61:                                                                  
 62:                                             *                   *
 63:                                  *                             * 
 64:                                                                  
DERIVES-IN-MANY RELATION
  0: ************************************* ***************************
  1:   *********************************** ***************************
  2:    ********************************** ***************************
  3:     **  *****************************       * *******************
  4:     **   ********  *************** **       * *******************
  5:     **   ********  *************** **       * *******************
  6:    **** *****************************       * *******************
  7:    ********************************** ***************************
  8:     **  *****************************       * *******************
  9:                                                                  
 10:     **   ********  *************** **       * *******************
 11:                                                                  
 12:     **   ********  *************** **       * *******************
 13:     **   ********  *************** **       * *******************
 14:                                                                  
 15:     **   ********  *************** **       * *******************
 16:     **   ********  *************** **       * *******************
 17:     **   ******** *******************       * *******************
 18:     **   ******** *******************       * *******************
 19:     **   ********  *************** **       * *******************
 20:     **   ********  *************** **       * *******************
 21:     **   ********  *************** **       * *******************
 22:     **   ********  *************** **       * *******************
 23:     **   ********  *************** **       * *******************
 24:     **   ********  *************** **       * *******************
 25:            *             *   *                                   
 26:     **   ********  *************** **       * *******************
 27:     **   ********  *************** **       * *******************
 28:                             *                                    
 29:            *                 *                                   
 30:     **   ********  *************** **       * *******************
 31:     **   ********  *************** **       * *******************
 32:     **   ********  *************** **       * *******************
 33:     **   ********  *************** **       * *******************
 34:     **   ******** *******************       * *******************
 35:     **   ********  *************** **       * *******************
 36:     **   ********  *************** **       * *******************
 37:                                                                  
 38:    ********************************** ***************************
 39:    ********************************** ***************************
 40:     **   ********  *************** **       * *******************
 41:    ********************************** ***************************
 42:    ********************************** ***************************
 43:     **   ********  *************** **       * *******************
 44:     **   ********  *************** **       * *******************
 45:    ********************************** ***************************
 46:     **   ********  *************** **       * *******************
 47:     **   ********  *************** **       * *******************
 48:                                                                  
 49:     **   ********  *************** **       * *******************
 50:     **   ********  *************** **       * *******************
 51:     **   ********  *************** **       * *******************
 52:     **   ********  *************** **       * *******************
 53:     **   ********  *************** **       * *******************
 54:     **   ********  *************** **       * *******************
 55:     **   ********  *************** **       * *******************
 56:     **   ********  *************** **       * *******************
 57:     **   ********  *************** **       * *******************
 58:     **   ********  *************** **       * *******************
 59:     **   ********  *************** **       * *******************
 60:     **   ********  *************** **       * *******************
 61:                                                                  
 62:     **   ********  *************** **       * *******************
 63:     **   ********  *************** **       * *******************
 64:                                                                  
Fenton impurity is: 0.878906
>>> Fenton closed impurity is: 64.0869
Class #4: (size = 38) 
	declaration_specifiers	declarator	type_specifier	struct_or_union_specifier	enum_specifier	struct_declaration_list	struct_declaration
	specifier_qualifier_list	struct_declarator_list	struct_declarator	constant_expression	enumerator_list	enumerator	direct_declarator
	parameter_type_list	parameter_list	parameter_declaration	abstract_declarator	assignment_expression	type_name	direct_abstract_declarator
	expression	conditional_expression	unary_expression	logical_or_expression	logical_and_expression	inclusive_or_expression	exclusive_or_expression
	and_expression	equality_expression	relational_expression	shift_expression	additive_expression	multiplicative_expression	cast_expression
	postfix_expression	primary_expression	argument_expression_list
Class #6: (size = 6) 
	compound_statement	statement	labeled_statement	selection_statement	iteration_statement	statement_list
Class #12: (size = 2) 
	initializer	initializer_list
>>> There are 22 equivalence classes, 3 of which are non-singleton
As a percentage of the number of non-terminals, there are 33.8% equivalence classes 
>>> (Depth) Largest equivalence class has 38 non-terminals
Varju height metric is: 59.1
EQUIVALENCE GRAPH (size 22)
0:  *************** *****
1:   ************** *****
2:    ************* *****
3:     *  *********   ***
4:         ***  ***   ***
5:    **  *********   ***
6:    *** ********* *****
7:     *   ********   ***
8:                       
9:                       
10:                       
11:     *   *** ****   ***
12:     *   ***  ***   ***
13:          *     *      
14:                       
15:          *            
16:                       
17:     *   ***  ***   ***
18:     *   ***  ***   ***
19:                       
20:                       
21:                       
